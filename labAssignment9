//Hiram Borrero
//lab_Assigment9

#include <stdio.h>
#include <stdlib.h>

// RecordType
struct RecordType
{
    int id;
    char name;
    int order;
};

// Node for linked list
struct Node
{
    struct RecordType record;
    struct Node* next;
};

// Fill out this structure
struct HashType
{
    struct Node** array; // Array of linked lists (buckets)
    int size; // Size of the array
};

// Compute the hash function
int hash(int x, int size)
{
    return x % size;
}

// Function to create a new node for the linked list
struct Node* createNode(struct RecordType data)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode)
    {
        newNode->record = data;
        newNode->next = NULL;
    }
    return newNode;
}

// Function to insert a record into the hash table
void insertRecord(struct HashType* hashTable, struct RecordType data)
{
    // Step 1: Compute the hash value
    int index = hash(data.id, hashTable->size);

    // Step 2: Create a new node with the data
    struct Node* newNode = createNode(data);

    // Step 3: Insert the node into the linked list at the computed index
    if (hashTable->array[index] == NULL)
    {
        hashTable->array[index] = newNode;
    }
    else
    {
        struct Node* current = hashTable->array[index];
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newNode;
    }
}

// display records in the hash structure
// skip the indices which are free
// the output will be in the format:
// index x -> id, name, order -> id, name, order ....
void displayRecordsInHash(struct HashType* hashTable)
{
    for (int i = 0; i < hashTable->size; ++i)
    {
        printf("index %d ->", i);
        struct Node* current = hashTable->array[i];
        while (current != NULL)
        {
            printf(" %d %c %d ->", current->record.id, current->record.name, current->record.order);
            current = current->next;
        }
        printf(" NULL\n");
    }
}

// Function to free memory used by the hash table
void freeHashTable(struct HashType* hashTable)
{
    if (hashTable)
    {
        for (int i = 0; i < hashTable->size; ++i)
        {
            struct Node* current = hashTable->array[i];
            while (current != NULL)
            {
                struct Node* temp = current;
                current = current->next;
                free(temp);
            }
        }
        free(hashTable->array);
        free(hashTable);
    }
}

int main(void)
{
    struct RecordType* pRecords; 
    int recordSz = 0;

    recordSz = parseData("input.txt", &pRecords);
    printRecords(pRecords, recordSz);

    // Create the hash table
    struct HashType* hashTable = (struct HashType*)malloc(sizeof(struct HashType));
    if (hashTable)
    {
        hashTable->size = recordSz;
        hashTable->array = (struct Node**)calloc(recordSz, sizeof(struct Node*));

        // Insert records into the hash table
        for (int i = 0; i < recordSz; ++i)
        {
            insertRecord(hashTable, pRecords[i]);
        }

        // Display records in the hash table
        displayRecordsInHash(hashTable);

        // Free memory used by the hash table
        freeHashTable(hashTable);
    }
    else
    {
        printf("Cannot allocate memory for the hash table.\n");
    }

    // Free memory used by the records array
    free(pRecords);

    return 0;
}
